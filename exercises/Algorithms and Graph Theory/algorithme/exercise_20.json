{
    "script": "L'algorithme d'exponentiation rapide est basé sur la remarque suivante : on a $a^{2p}=a^p\\cdot a^p$ et $a^{2p+1}=a^p\\cdot a^p\\cdot a$. Ainsi, pour calculer $a^{2p}$, il suffit de savoir calculer $a^p$ et de faire une multiplication, et pour calculer $a^{2p+1}$, il suffit de savoir calculer $a^p$ et de faire deux multiplications. L'algorithme suivant implémente récursivement l'algorithme d'exponentiation rapide sous Python :def exporapide(a,n):if n==0:return 1b=exporapide(a,n//2)if (n%2)==1:return b*b*aelse:return b*bDémontrer que, pour tout $n\\geq 1$, le nombre total de multiplications effectuées par un appel à exporapide(a,n) est inférieur ou égal à $2+2\\lfloor \\log_2 n\\rfloor$.",
    "hint": "Procéder par récurrence forte sur $n$.",
    "solution": "On va procéder par récurrence forte sur $n\\geq 1$. On fixe $a$ et pour tout $n\\geq 1$, notons $\\mathcal P(n)$ la propriété \"un appel à exporapide(a,n) effectue au plus $2+2\\lfloor \\log_2 n\\rfloor$ multiplications\".Initialisation : exporapide(a,1) effectue deux multiplications, et $2=2+2\\lfloor \\log_2 1\\rfloor$.Hérédité : On suppose que $\\mathcal P(k)$ est vraie pour tout $k\\leq n-1$ et on va prouver que $\\mathcal P(n+1)$ est vraie. On distingue alors deux cas :ou bien $n$ est pair : dans ce cas, le nombre total de multiplications effectuées par exporapide(a,n) est égal à 1 plus le nombre de multiplications effectuées par exporapide(a,n/2). Par hypothèse de récurrence, le nombre total est inférieur ou égal à  $1+2+2\\lfloor\\log_2(n/2)\\rfloor$. Mais $\\log_2(n/2)=\\log_2(n)-1$ et donc le nombre d'appels est majoré par $1+2+2\\lfloor \\log_2(n)\\rfloor-2\\leq 2+2\\lfloor\\log_2(n)\\rfloor$.ou bien $n$ est impair : dans ce cas, exporapide(a,n) effectue deux muliplications et autant de multiplications que exporapide(a,(n-1)/2). Par hypothèse de récurrence, le nombre total de multiplications est donc majoré par \r\n$$2+2+2\\lfloor\\log_2((n-1)/2)\\rfloor\\leq 4+2\\lfloor \\log_2(n-1)\\rfloor-2\\leq 2+2\\lfloor\\log_2(n)\\rfloor.$$Dans tous les cas, on a prouvé que $\\mathcal P(n)$ est vérifiée.Conclusion : par le principe de récurrence fort, $\\mathcal P(n)$ est vrai pour tout $n\\geq 1$.",
    "lang": "french"
}