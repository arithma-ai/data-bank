{
    "script": "Le but de l'exercice est d'écrire un algorithme pour décomposer un entier en produit de nombres premiers. Si $n$ est un entier naturel non nul et $p$ est un nombre premier, on note $v_p(n)$ le plus grand entier $k$ tel que $p^k$ divise $n$. Si $p$ ne divise pas $n$, on pose $v_p(n)=0$. L'entier $v_p(n)$ s'appelle la valuation $p$-adique de $n$.Écrire une fonction booléenne $\\textrm{estPremier}(n)$ qui prend en argument un entier naturel non nul $n$ et qui renvoie le booléen $\\textrm{True}$ si $n$ est premier et la booléen $\\textrm{False}$ sinon. On pourra utiliser le critère suivant : un entier $n\\geq 2$ qui n'est divisible par aucun entier $d\\geq 2$ tel que $d^2\\leq n$ n'est pas premier.En déduire une fonction $\\textrm{liste_premiers}(n)$ qui prend en argument un entier naturel non nul $n$ et renvoie la liste des nombres premiers inférieurs ou égaux à $n$.Pour calculer la valuation 2-adique de 40, on peut utiliser la méthode suivante:40 est divisible par 2 et le quotient vaut 2020 est divisible par 2 et le quotient vaut 1010 est divisible par 2 et le quotient vaut 55 n'est pas divisible par 2.La valuation 2-adique de 40 vaut donc 3.Écrire  une  fonction $\\textrm{valuation_p_adique(n, p)}$ non récursive qui  implémente  cet  algorithme.  Elle  prend  en  arguments  un  entier  naturel  $n$ non  nul  et  un  nombre  premier  $p$ et renvoie la valuation $p$-adique      de $n$. Par exemple, puisque $40=2^3\\times 5$, $\\textrm{valuation_p_adique(40, 2)}$ renvoie 3, $\\textrm{valuation_p_adique(40, 5)}$ renvoie 1 et $\\textrm{valuation_p_adique(40, 7)}$ renvoie 0.Écrire une deuxième fonction cette fois-ci récursive, $\\textrm{val}(n, p)$ qui renvoie la valuation $p$-adique de $n$.En  déduire une fonction $\\textrm{decomposition_facteurs_premiers(n)}$ qui  calcule la décomposition en facteurs premiers d'un entier $n\\geq 2$. Cette  fonction doit renvoyer la liste des couples $(p,v_p(n))$ pour tous les nombres premiers $p$ qui divisent $n$. Par exemple, $\\textrm{decomposition_facteurs_premiers}(40)$ renvoie la liste $[[2,3],[5, 1]]$.",
    "hint": "",
    "solution": "On traite le cas $n=1$ séparément, puis on utilise l'algorithme proposé par l'énoncé. On teste tous les nombres entre $2$ et $\\sqrt n$ pour voir s'ils divisent $n$. Si c'est le cas pour un entier, on retourne $\\textrm{False}$. Sinon, on retourne $\\textrm{True}$.def estPremier(n):if (n<2):return Falsed=2while ((d*d)<=n):if ( (n%d)==0):return Falsed+=1return TrueOn parcourt tous les nombres compris entre 2 et $n$, et on les ajoute à la liste s'ils sont premiers.def liste_premiers(n):l=[]for d in range(2,n+1):if (estPremier(d)):l.append(d)return lOn initialise un entier $s$ à $0$. On augmente $s$ de $1$ à chaque fois que $p$ divise $n$, et on divise $n$ par $p$.def valuation_p_adique(n,p):s=0while ((n%p)==0):s+=1n=n/preturn sAvec la même idée :def val(n,p):if ((n%p)==0):return val(n/p,p)+1else:return 0On parcourt la liste des premiers inférieurs ou égaux à $n$, et on ajoute ce premier $p$ et la valuation $p$-adique de $n$ à la liste si toutefois cette valuation est strictement positive.def decomposition_facteurs_premiers(n):l=liste_premiers(n)liste=[]for p in l:vp=val(n,p)if vp>0:liste.append( [p,vp] )return liste",
    "lang": "french"
}