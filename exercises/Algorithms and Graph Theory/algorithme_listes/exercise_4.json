{
    "script": "Écrire une fonction Python $maxi(L)$ prenant en argument une liste d'entiers naturels $L$ et renvoyant le maximum des entiers de cette liste (on n'utilisera pas de fonction spécifique de Python déterminant ce maximum). Quelle est le nombre d'opérations élémentaires effectué par cette fonction en fonction de la longueur $n$ de la liste?Écrire une fonction Python $nboc(L)$ prenant en argument une liste d'entiers naturels $L$ et retournant une liste $T$ de longueur $M=maxi(L)+1$ où, pour tout $i\\in\\{0,\\dots,M\\}$, $T[i]$ est le nombre d'occurences de $i$ dans la liste $L$.Quel est, en fonction de $n$ et $M$, le nombre d'opérations élémentaires effectué par votre fonction $nboc(L)$?On veut que ce nombre ne dépende pas de $L$. Modifier votre fonction si ce n'est pas le cas.",
    "hint": "Parcourir une fois la liste.Écrire une fonction intermédiaire $nb(L,i)$ qui donne le nombre de fois où $i$ apparait dans $L$.Parcourir une seule fois la liste $L$ et modifier la liste $T$ au fur et à mesure de ce parcours.",
    "solution": "def maxi(L):retour=L[0]for i in range(1,len(L)):if (L[i]>retour):retour=L[i]return retour;Cet algorithme parcourt une fois la liste, et à chaque étape, effectue une ou deux opérations élementaires. La complexité de cette fonction est donc en $O(n)$.On commence par écrire une fonction intermédiaire $nb(L,i)$ qui donne le nombre de fois où $i$ apparait dans $L$ puis on crée $T$ en donnant à $T[i]$ la valeur de $nb(L,i)$ pour toute valeur de $i$ possible.def nb(L,i):retour=0for j in range(len(L)):if (L[j]==i):retour+=1return retourdef nboc(L):T=[]for i in range(maxi(L)+1):T.append(nb(L,i))return T;La fonction $nb(L,i)$ effectue $O(n)$ opérations élémentaires. La fonction $nboc(L)$ appelle $M+1$ fois la fonction $nb(L,i)$. La complexité de cette dernière fonction est donc en $O(M\\times n)$. Remarquons que $M$ peut être beaucoup plus grand que $n$.On va parcourir une seule fois la liste $L$ et modifier la liste $T$ au fur et à mesure de ce parcours.def nboc2(L):T=[0]*(maxi(L)+1)  # On crée une liste de longeur maxi(L)+1# où tous les éléments sont nulsfor i in range(len(L)):T[L[i]]+=1return TLa complexité de cette fonction est désormais en $O(n)$.",
    "lang": "french"
}