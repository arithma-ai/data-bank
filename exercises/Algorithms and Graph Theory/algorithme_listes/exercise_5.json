{
    "script": "On propose l'algorithme suivant :def rech_dicho(L,g,d,x):\"\"\"L est une liste telle que L[g:d+1] est triee\"\"\"if x>L(d):return d+1else:a=gb=dwhile a!=b:c=(a+b)//2if x<=L[c]:b=celse:a=c+1return aOn prend $L=[2,4,5,7,7,8,10]$. Que renvoient les instructions suivantes?rech_dicho(L,1,5,6)rech_dicho(L,0,5,1)Que fait la fonction rech_dicho?Quelle est la complexité de cette fonction, mesurée en nombre de comparaisons. On pourra exprimer cette complexité en fonction d'un ou plusieurs paramètres parmi $\\textrm{len}(L),g,d,x$.",
    "hint": "Bien suivre l'évolution de $a$ et de $b$ au cours de la boucle.",
    "solution": "D'abord $L[5]=8$ qui est plus grand que $x=6$. On entre dans la partie \"else\" de la fonction, avec $a=1$ et $b=5$, puis $c=3$. On a $L[3]=7$ qui est plus grand que $x$, donc on change $b$ en $3$. On a ensuite (deuxième exécution de la boucle while) $c=2$ et $L[2]=5<6$. Il vient $a=3$ et on sort de la boucle. La fonction retourne donc $3$.Là encore, on va rentrer dans la boucle while. Comme $x$ est inférieur à tous les éléments de la liste, c'est toujours $b$ qu'on va changer. La fonction va donc retourner $0$.Si $x>L[d]$, alors rech_dico retourne $d+1$. Sinon, rech_dico retourne un entier $k$ compris entre $g$ et $d$ tel quetous les éléments $L[g],\\dots,L[k-1]$ sont strictement inférieurs à $x$;tous les élements $L[k],\\dots,L[g]$ sont supérieurs ou égaux à $x$.Cette propriété se démontre par le fait que, à chaque itération de la boucle, les éléments $L[g],\\dots,L[a-1]$ sont strictement inférieurs ou égaux à $x$, et les éléments $L[b],\\dots,L[d]$ sont supérieurs ou égaux à $x$. Cette propriété est vraie en rentrant dans la boucle. Ensuite, si la propriété est vraie au début d'une itération de la boucle, elle l'est encore en sortant de la boucle. En effet, si $L[c]\\geq x$, alors $b=c$ et les éléments $L[b],\\dots,L[d]$ sont encore supérieurs ou égaux à $x$ en sortant de la boucle (et $a$ est inchangé). Sinon, $L[c]<x$, et puisque $a=c+1$, les éléments $L[g],\\dots,L[a-1]=L[c]$ sont bien strictement inférieurs à $x$.Le nombre de comparaisons effectué est proportionnel au nombre d'itérations de la boucle. Notons $a_n$ (resp. $b_n$) la valeur de $a$ (resp. $b$) au début de la $n$-ième itération de la boucle. Alors $a_1=g$ et $b_1=d$. De plus, on a $b_{n+1}-a_{n+1}\\leq\\frac{b_n-a_n}{2}$. C'est vrai si $b_{n+1}=c\\leq \\frac{a_n+b_n}2$. En effet, on a alors\r\n$$b_{n+1}-a_{n+1}\\leq\\frac{a_n+b_n}2-a_n=\\frac{b_n-a_n}2.$$\r\nC'est aussi vrai si $a_{n+1}=c+1\\geq\\frac{a_n+b_n}2$ comme le montre un calcul similaire.On a donc, tant qu'on n'est pas sorti de la boucle, \r\n$$b_n-a_n=\\frac{g-d}{2^{n-1}}.$$\r\nOn sort pour le premier $n$ tel que $b_n-a_n<1$, et donc dès que $n$ vérifie l'inégalité \r\n$$1>\\frac{g-d}{2^{n-1}}\\iff n> 1+\\log_2(g-d).$$\r\nLa complexité est donc $O\\left(\\log_2(g-d)\\right)$.",
    "lang": "french"
}